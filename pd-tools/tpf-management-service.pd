#N canvas 719 43 579 555 10;
#X msg 60 319 /bla 123;
#X obj 60 339 s \$0.to;
#N canvas 821 348 558 410 tpf.communication 0;
#X obj 7 8 r SERVER;
#X obj 7 74 s \$0.from;
#X obj 122 11 r SERVER;
#X obj 122 32 route socket;
#X obj 122 54 s \$0.client;
#X obj 8 113 r \$0.to;
#X obj 8 287 list trim;
#X obj 8 308 s SERVER;
#X obj 8 264 list prepend;
#X msg 88 202 list to send \$1;
#N canvas 318 263 213 161 tcp.prepare 0;
#X obj 20 28 t b a;
#X obj 20 98 list append;
#X obj 52 55 s to.tcp.prepare;
#X obj 52 74 r from.tcp.prepare;
#X obj 20 5 inlet;
#X obj 20 122 outlet;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 1 0 5 0;
#X connect 3 0 1 1;
#X connect 4 0 0 0;
#X restore 8 241 pd tcp.prepare;
#X obj 88 180 r \$0.client;
#X obj 8 137 list split 1;
#X obj 8 180 list append;
#X obj 7 51 routeOSC /tpf;
#X msg 8 160 symbol /s/tpf\$1;
#X obj 7 28 route server;
#X obj 8 221 packOSC;
#X obj 8 200 list trim;
#X obj 201 104 r \$0.broadcast;
#X obj 201 276 list trim;
#X obj 201 297 s SERVER;
#N canvas 318 263 213 161 tcp.prepare 0;
#X obj 20 28 t b a;
#X obj 20 98 list append;
#X obj 52 55 s to.tcp.prepare;
#X obj 52 74 r from.tcp.prepare;
#X obj 20 5 inlet;
#X obj 20 122 outlet;
#X connect 0 0 1 0;
#X connect 0 1 2 0;
#X connect 1 0 5 0;
#X connect 3 0 1 1;
#X connect 4 0 0 0;
#X restore 201 230 pd tcp.prepare;
#X obj 201 126 list split 1;
#X obj 201 169 list append;
#X msg 201 149 symbol /s/tpf\$1;
#X obj 201 210 packOSC;
#X obj 201 189 list trim;
#X obj 201 253 list prepend to broadcast;
#X connect 0 0 16 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 5 0 12 0;
#X connect 6 0 7 0;
#X connect 8 0 6 0;
#X connect 9 0 8 1;
#X connect 10 0 8 0;
#X connect 11 0 9 0;
#X connect 12 0 15 0;
#X connect 12 1 13 1;
#X connect 13 0 18 0;
#X connect 14 0 1 0;
#X connect 15 0 13 0;
#X connect 16 0 14 0;
#X connect 17 0 10 0;
#X connect 18 0 17 0;
#X connect 19 0 23 0;
#X connect 20 0 21 0;
#X connect 22 0 28 0;
#X connect 23 0 25 0;
#X connect 23 1 24 1;
#X connect 24 0 27 0;
#X connect 25 0 24 0;
#X connect 26 0 22 0;
#X connect 27 0 26 0;
#X connect 28 0 20 0;
#X restore 13 12 pd tpf.communication;
#X msg 175 316 /to/everyone blbla;
#X obj 175 336 s \$0.broadcast;
#X obj 260 186 r \$0.from;
#X obj 260 206 print TFP;
#N canvas 902 132 433 378 register/name 0;
#X obj 130 341 s \$0.to;
#X obj 7 11 r \$0.from;
#X obj 7 31 routeOSC /register/name;
#X msg 7 264 /register/done;
#X obj 7 52 list prepend;
#X obj 87 52 r \$0.client;
#N canvas 0 43 333 404 prevent_duplicates 0;
#X obj 80 81 text search \$0.clients 1;
#X obj 80 101 == -1;
#X obj 23 62 unpack f s;
#X obj 23 174 == -1;
#X obj 23 154 text search \$0.clients 0;
#X obj 23 214 &&;
#X obj 23 234 sel 1;
#X text 66 233 bang if neither id nor name is found;
#X obj 23 194 t a a;
#X obj 91 255 sel 0;
#X msg 91 275 id already in use;
#X obj 80 124 t a a;
#X msg 176 201 name already in use;
#X obj 176 183 sel 0;
#X obj 23 14 inlet;
#X obj 23 359 outlet;
#X obj 91 307 outlet;
#X connect 0 0 1 0;
#X connect 1 0 11 0;
#X connect 2 0 4 0;
#X connect 2 1 0 0;
#X connect 3 0 8 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 6 0 15 0;
#X connect 8 0 5 0;
#X connect 8 1 9 0;
#X connect 9 0 10 0;
#X connect 10 0 16 0;
#X connect 11 0 5 1;
#X connect 11 1 13 0;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 14 0 2 0;
#X restore 7 123 pd prevent_duplicates;
#X obj 130 148 list prepend /register/error;
#X obj 130 168 list trim;
#X obj 7 96 t a a;
#X obj 7 143 list append;
#X obj 71 201 loadbang;
#X obj 7 163 t b a;
#X obj 34 242 text set \$0.clients;
#X msg 71 221 1e+06;
#X connect 1 0 2 0;
#X connect 2 0 4 0;
#X connect 3 0 0 0;
#X connect 4 0 9 0;
#X connect 5 0 4 1;
#X connect 6 0 10 0;
#X connect 6 1 7 0;
#X connect 7 0 8 0;
#X connect 8 0 0 0;
#X connect 9 0 6 0;
#X connect 9 1 10 1;
#X connect 10 0 12 0;
#X connect 11 0 14 0;
#X connect 12 0 3 0;
#X connect 12 1 13 0;
#X connect 14 0 13 1;
#X restore 13 52 pd register/name;
#N canvas 595 213 337 132 protol/version 0;
#X obj 17 15 r \$0.from;
#X obj 17 75 s \$0.to;
#X obj 17 35 routeOSC /protocol/version;
#X msg 17 55 /protocol/version 1 0;
#X connect 0 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X restore 13 32 pd protol/version;
#X obj 282 47 text define \$0.clients;
#N canvas 740 527 446 318 unregister/name 0;
#X text 11 9 We want disconnceting clients to automatically unregister
by IP and port.;
#X obj 14 50 r SERVER;
#X obj 14 90 t a a;
#X obj 15 114 -;
#X obj 15 135 sel -1;
#X text 68 136 <- detects a disconnecting client;
#X obj 15 163 list append;
#X obj 48 282 text delete \$0.clients;
#X obj 15 258 sel -1;
#X obj 14 71 route num_of_clients socket;
#X obj 15 232 text search \$0.clients 0;
#X connect 1 0 9 0;
#X connect 2 0 3 1;
#X connect 2 1 3 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 6 0 10 0;
#X connect 8 1 7 0;
#X connect 9 0 2 0;
#X connect 9 1 6 1;
#X connect 10 0 8 0;
#X restore 13 71 pd unregister/name;
#X connect 0 0 1 0;
#X connect 3 0 4 0;
