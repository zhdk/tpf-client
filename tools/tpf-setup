#!/bin/bash

# defaults
externaldir=~/Library/Pd
EXTERNALURLS=(
  'http://puredata.info/Members/rdz/software/iemnet/0.2.1~git20151214/iemnet-v0.2.1~git20151214-(Darwin-i386-32)(Darwin-x86_64-32)-externals.tar.gz'
  'http://puredata.info/Members/rdz/software/osc/0.2~git20151118/osc-v0.2~git20151118-(Darwin-i386-32)(Darwin-x86_64-32)-externals.tar.gz'
  'http://puredata.info/Members/rdz/software/slip/0.1~git20151118/slip-v0.1~git20151118-(Darwin-i386-32)(Darwin-x86_64-32)-externals.tar.gz'
  'http://puredata.info/Members/rdz/software/ggee/0.27~git20151117/ggee-v0.27~git20151117-(Darwin-i386-32)(Darwin-x86_64-32)-externals.tar.gz'
)
qjconffile=~/Library/Preferences/org.rncbc.QjackCtl.plist
pdconffile=~/Library/Preferences/org.puredata.pd.plist

# do nothing (test)
if [ "$1" == "--do-nothing" ]
then
  exit 0
fi

# Create symlink to qjackctl application
if [ ! -e /Applications/qjackctl.app ]
then
  read -p "Create symlink to qjackctl.app in /Applications? Y/n " -r
  if [[ ! $REPLY =~ ^[Nn]$ ]]
  then
    if  [ -w /Applications ]
    then
      ln -s /usr/local/opt/qjackctl-tpf/qjackctl.app /Applications/
    else
      sudo ln -s /usr/local/opt/qjackctl-tpf/qjackctl.app /Applications/
    fi
    echo "Done."
  else
    echo "Skipping..."
  fi
fi

# Install qjackctl configuration
if [ -f $qjconffile ]
then
  prompt="Overwrite existing qjackctl configuration file? Y/n "
else
  prompt="Write qjackctl configuration file? Y/n "
fi
read -p "$prompt" -r
if [[ ! $REPLY =~ ^[Nn]$ ]]
then
  cp /usr/local/share/tpf/org.rncbc.QjackCtl.plist $qjconffile
  echo "Done."
else
  echo "Skipping..."
fi

# Install pd configuration
if [ -f $pdconffile ]
then
  prompt="Overwrite existing pd configuration file? Y/n "
else
  prompt="Write pd configuration file? Y/n "
fi
read -p "$prompt" -r
if [[ ! $REPLY =~ ^[Nn]$ ]]
then
  cp /usr/local/share/tpf/org.puredata.pd.plist $pdconffile
  echo "Done."
else
  echo "Skipping..."
fi

# Create external dir, if there is none yet
if [ ! -d $externaldir ]
then
  mkdir $externaldir
fi

function install_external {
  # ARG1: url of Pd external
  local url="$1"
  local archive
  (
    cd $externaldir
    curl -s -O "$1"
    archive="$(basename "$url")"
    tar xf "$archive"
    rm "$archive"
  )
}

read -p "Install required Pd externals? Y/n " -r
if [[ ! $REPLY =~ ^[Nn]$ ]]
then
  for url in ${EXTERNALURLS[*]}
  do
    package=$(basename "$url" | sed -e 's/-.*$//')
    echo "Installing $package to $externaldir"
    install_external "$url"
  done
  echo "Done."
else
  echo "Skipping..."
fi

# Installation of Jackmp.framework
read -p "Install Jackmp.framwork (required by some Jack clients)? Y/n " -r
if [[ ! $REPLY =~ ^[Nn]$ ]]
then
  URL="https://gitlab.zhdk.ch/TPF/homebrew-tpf-bottles/raw/master/pkgs/Jackmp.framework.tar.gz"
  (
    cd /Library/Frameworks/
    curl -s "$URL" | sudo tar xf -
  )
  echo "Done."
else
  echo "Skipping..."
fi

# Installation of JackRouter.plugin
read -p "Install JackRouter.plugin (required by some Jack clients)? Y/n " -r
if [[ ! $REPLY =~ ^[Nn]$ ]]
then
  URL="https://gitlab.zhdk.ch/TPF/homebrew-tpf-bottles/raw/master/pkgs/JackRouter.plugin.tar.gz"
  (
    cd /Library/Audio/Plug-Ins/HAL/
    curl -s "$URL" | sudo tar xf -
  )
  echo "Done."
  echo "NOTE: JackRouter is only listed in Audio-Midi-Setup after reboot!"
else
  echo "Skipping..."
fi

# At this point mtr should be installed and thus if we don't find
# it means that /usr/local/sbin is not part of PATH
if ! echo $PATH | grep -q "/usr/local/sbin"
then
  read -p "Add /usr/local/sbin to your PATH? Y/n " -r
  if [[ ! $REPLY =~ ^[Nn]$ ]]
  then
    echo "export PATH=/usr/local/sbin:$PATH" >> ~/.bash_profile
    echo "Please execute the following in your terminal window:"
    echo 'source ~/.bash_profile'
  fi
fi

